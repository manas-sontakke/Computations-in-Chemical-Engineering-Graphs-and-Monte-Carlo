// Question 1

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        if (head == nullptr) {
            return nullptr;
        }

        ListNode* ptr = head;
        ListNode* prevptr = nullptr;
        int ctr = 0;

        while (ptr != nullptr) {
            ptr = ptr->next;
            ctr++;
        }

        ptr = head;
        if (ctr % 2 == 1) {
            for (int i = 0; i < ctr / 2; i++) {
                prevptr = ptr;
                ptr = ptr->next;
            }
        } else {
            for (int i = 0; i < (ctr / 2) ; i++) {
                prevptr = ptr;
                ptr = ptr->next;
            }
        }

        if (prevptr != nullptr) {
            prevptr->next = ptr->next;
        } else {
            head = ptr->next;
        }

        delete ptr;
        return head;
        
    }
};

// Question 2

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode dummy(0);
        ListNode* current = &dummy;

        while (list1 != nullptr && list2 != nullptr) {
            if (list1->val < list2->val) {
                current->next = list1;
                list1 = list1->next;
            } else {
                current->next = list2;
                list2 = list2->next;
            }
            current = current->next;
        }
        if (list1 != nullptr) {
            current->next = list1;
        }

        if (list2 != nullptr) {
            current->next = list2;
        }
        return dummy.next;
    }
};

// Question 3